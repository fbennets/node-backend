datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
    emitOnly = "models"
}

model DecisionTree {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  tags      Json?     
  treeData  Json?     @db.JsonB
  language  String   @default("de_DE")
  /// @TypeGraphQL.omit(output: true, input: true)
  owner     User     @relation(fields: [ownerUuid], references: [uuid])
  /// @TypeGraphQL.omit(output: true, input: true)
  ownerUuid String   @db.Uuid
}

model User {
  id                    Int            @unique @default(autoincrement())
  uuid                  String         @id @db.Uuid @default(uuid())
  name                  String?
  role                  Role           @default(USER)
  email                 String         @unique
  password              String
  emailIsVerified       Boolean       @default(false)
  DecisionTrees         DecisionTree[]
  Token                 Token[]
}

model Token {
  id                    Int           @id @unique @default(autoincrement())
  token                 String
  type                  TokenType
  owner                 User          @relation(fields: [ownerUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade) 
  ownerUuid             String        @db.Uuid
  expires               DateTime
  loginExpiry           DateTime?
  blacklisted           Boolean       @default(false)
}

enum Role {
  USER
  STAFF
  DEVELOPER
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}